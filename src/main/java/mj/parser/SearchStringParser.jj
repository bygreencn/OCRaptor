/* --------------------------------------------------------- */
/* -------------------CLASS SPECIFICATION------------------- */
/* --------------------------------------------------------- */

PARSER_BEGIN(SearchStringParser)
package parser;

import java.io.StringReader;
import parser.Operator;

@SuppressWarnings("all")
public class SearchStringParser {

    private Operator operator = null;

    private String fullText = null,
                   metaData= null,
                   contentData = null;

    private Boolean md = null;

    public Boolean metaDataFirst() {
      return this.md;
    }

    public Operator getOperator() {
      return this.operator;
    }

    public String getLuceneFulltextToken() {
      return this.fullText;
    }

    public String getLuceneContentToken() {
      return this.contentData;
    }

    public String getLuceneMetaDataToken() {
      return this.metaData;
    }
}
PARSER_END(SearchStringParser)

/* --------------------------------------------------------- */
/* -------------------TOKEN-SPECIFICATION------------------- */
/* --------------------------------------------------------- */


// skip whitespaces, tabs and line breaks
< DEFAULT > SKIP : { " " | "\t" | "\n" }

<DEFAULT> TOKEN :
{
    < AND_OPERATOR        : "AND"              >
  | < OR_OPERATOR         : "OR"               >
  | < AND_NOT_OPERATOR    : "AND NOT"          >

  | < FULLTEXTSEARCH      : "F" | "FULLTEXT"   >
  | < CONTENTSEARCH       : "C" | "CONTENT"    >
  | < METADATASEARCH      : "M" | "METADATA"   >
  | < LUCENE_OPEN         : "<"                > : LUCENE
  | < LUCENE_CLOSE        : ">"                >
}

< LUCENE > TOKEN :
{
  < LUCENE_EXPRESSION     : (~[">"] | "\\>")+  > : DEFAULT
}

/* --------------------------------------------------------- */
public void parse():
{}
{
    ( content()  ( ( op() metadata() { this.md=false; } ) | <EOF>) )
  | ( metadata() ( ( op() content()  { this.md=true;  } ) | <EOF>) )
  | ( fulltext()                                            <EOF>  )
}
/* --------------------------------------------------------- */
private void fulltext(): { Token luceneToken; }
{
  <FULLTEXTSEARCH> <LUCENE_OPEN> luceneToken=<LUCENE_EXPRESSION>
    { this.fullText = luceneToken.image; }
  <LUCENE_CLOSE>
}
/* --------------------------------------------------------- */
private void content():  { Token luceneToken; }
{
  <CONTENTSEARCH> <LUCENE_OPEN> luceneToken=<LUCENE_EXPRESSION>
    { this.contentData = luceneToken.image; }
  <LUCENE_CLOSE>
}
/* --------------------------------------------------------- */
private void metadata(): { Token luceneToken; }
{
  <METADATASEARCH> <LUCENE_OPEN> luceneToken=<LUCENE_EXPRESSION>
    { this.metaData = luceneToken.image; }
  <LUCENE_CLOSE>
}
/* --------------------------------------------------------- */
private void op(): {}
{
    <AND_OPERATOR>     { this.operator = Operator.AND;     }
  | <OR_OPERATOR>      { this.operator = Operator.OR;      }
  | <AND_NOT_OPERATOR> { this.operator = Operator.AND_NOT; }
}
/* --------------------------------------------------------- */
